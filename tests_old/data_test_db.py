import itertools
from collections import namedtuple
from itertools import combinations_with_replacement
import pytest

'''
TODO: 
 - add mapping via id's
 - id's have to be unique (related to id or globaly)
    - impossible ex. status 'valid' for multiple values
    - map entries via id and/or value ?
 - add possibility to pytest marks (as dictionary?)
 - mapping can return subset of values
 - implement merge marks - if combined values have set marks of same type
'''

request_template_data = {
    'id': 433,
    'scan_title': 'test1',
    'status': 'New',
    'ip': '2.253.233.233,2.253.233.233,2.253.234.57,2.253.234.75',
    'option_title': 'UNIX/LINUX',
    'iscanner_name': 'test_appliance_name',
    'date_time': '2018-07-30 11:05:31',
    'owner': 'test_user'
}

ip_value_list = ['123.123.123.123,234.234.234.234',  # valid ips
                 '168.240.2.254-168.240.3.2,192.168.1.1']  # valid ips with list

ip_value_list_e = [('123.123.123.123,234.234.234.234', 'valid_single_ips',),  # valid ips
                   ('168.240.2.254-168.240.3.2,192.168.1.1', 'valid_ip_range')]  # valid ips with list

# status_value_list_e = zip(['New', 'Running', 'ERR_', 'Finished'],itertools.repeat('valid_status'))
status_value_list_e = [('Running', 'valid_status')]
date_time_list = ['2018-07-30 11:05:31', '2018-07-32 31:05:31']
date_time_list_e = [('2018-07-30 11:05:31', 'valid_date'),
                    ('2018-07-32 31:05:31', 'invalid_date')]

variable_items = {
    'status': status_value_list_e,
    'ip': ip_value_list_e,
    'date_time': date_time_list_e
}


def generate_dict_e(template=None, method='simple', **kwargs):
    '''
    Generate list of test data based on template and key with corresponding values

    Args:
        template (dict): template used to generate data
        method: simple - generate one entry per key value from **kwargs
                combine - generate entry for cartesian product of  key values
        **kwargs: key values containing list of (value, id) tuples where id is used to generate pytest id
                key have to exist in template

    Returns:
        list:  list of tuples (value, [list of ids])

    Raises:
        ValueError: no key with corresponding data is provided or if provided key doesnt exist in template
        TypeError: template is not dict
    '''

    if len(kwargs) == 0:
        raise ValueError('no key values provided')
    if not isinstance(template, dict):
        raise TypeError('template not dictionary')
    if set(kwargs.keys()).difference(template.keys()):
        raise ValueError('provided positional names are not template dict key')

    result = []
    if method == 'simple':
        processed_kwargs = [(k, i) for k, v in kwargs.items() for i in
                            v]  # [(k, i) for k, v in kwargs.items() for i in v ]
        final_values = [dict([i]) for i in processed_kwargs]
    elif method == 'combine':
        processed_kwargs = [[(k, i) for i in v] for k, v in kwargs.items()]
        cartesian_product = itertools.product(*processed_kwargs)
        final_values = [dict(i) for i in cartesian_product]

    for entry in final_values:
        keys, values_data, values_id = entry.keys(), *zip(*entry.values())
        result.append((dict(template, **dict(zip(keys, values_data))), values_id))
    return result


def data_dict2param(data_dict_e):
    '''
    Transforms provided list generated by ``generate_dict_e`` function to list of pytest.param list

    Args:
        data_dict_e (list): list generated by ``generate_dict_e``

    Returns:
            list: list of pytest.param items
    '''
    result = []
    for entry in data_dict_e:
        result.append(pytest.param(entry[0], id=' '.join(entry[1])))
    return result


[
    {
        "cmdb_ip_address": "2.148.36.13",
        "cmdb_folder": "EMEA"
    },
    {
        "cmdb_ip_address": "156.137.105.12",
        "cmdb_folder": "ITS AM"
    },
    {
        "cmdb_ip_address": "156.137.105.11",
        "cmdb_folder": "ITS AM"
    },
    {
        "cmdb_ip_address": "165.72.172.161",
        "cmdb_folder": "EMEA"
    },
    {
        "cmdb_ip_address": "199.40.169.13",
        "cmdb_folder": "AP"
    },
    {
        "cmdb_ip_address": "165.72.172.217",
        "cmdb_folder": "EMEA"
    },
    {
        "cmdb_ip_address": "165.72.172.211",
        "cmdb_folder": "EMEA"
    }
]

# data_dict_e = generate_dict_e(request_template_data, ip=ip_value_list_e, date_time=date_time_list_e, method='simple')
data_dict_e = generate_dict_e(request_template_data, **variable_items, method='simple')
data_dict_e_c = generate_dict_e(request_template_data, ip=ip_value_list_e, date_time=date_time_list_e, method='combine')
test_data_simple = data_dict2param(data_dict_e)
test_data_combined = data_dict2param(data_dict_e_c)
template_valid = data_dict2param([(request_template_data, ['template_valid'])])

# SELECT cmdb_ip_address, cmdb_folder  FROM ops.server where id  between 58198 and 59471;
ops_server_table_sample = [
    {
        "cmdb_ip_address": "156.137.105.11",
        "cmdb_folder": "ITS AM"
    },
    {
        "cmdb_ip_address": "165.72.172.161",
        "cmdb_folder": "EMEA"
    },
    {
        "cmdb_ip_address": "199.40.169.13",
        "cmdb_folder": "AP"
    }
]

[
  {
    "region": "EMEA",
    "id": "scan/1536590342.62067"
  },
  {
    "region": "EMEA",
    "id": "scan/1536761006.75783"
  },
  {
    "region": "EMEA",
    "id": "scan/1541501855.16509"
  }
]
